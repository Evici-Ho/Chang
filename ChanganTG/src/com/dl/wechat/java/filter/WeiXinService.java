package com.dl.wechat.java.filter;

import java.util.Date;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import com.dl.wechat.java.message.accept.TextMessageAccept;
import com.dl.wechat.java.message.reply.TextMessageReply;

public class WeiXinService {

	public static String common(String msgType, Map<String, String> requestMap) {
		String respContent = "请求处理异常，请稍候尝试！";
		// 文本消息
		if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_TEXT)) {
			respContent = "您发送的是文本消息！";
		}
		// 图片消息
		else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_IMAGE)) {
			respContent = "您发送的是图片消息！";
		}
		// 地理位置消息
		else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_LOCATION)) {
			respContent = "您发送的是地理位置消息！";
		}
		// 链接消息
		else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_LINK)) {
			respContent = "您发送的是链接消息！";
		}
		// 音频消息
		else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_VOICE)) {
			respContent = "您发送的是音频消息！";
		}
		// 事件推送
		else if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_EVENT)) {
			// 事件类型
			String eventType = requestMap.get("Event");
			// 订阅
			if (eventType.equals(MessageUtil.EVENT_TYPE_SUBSCRIBE)) {
				respContent = "感谢您关注！";
			}
			// 取消订阅
			else if (eventType.equals(MessageUtil.EVENT_TYPE_UNSUBSCRIBE)) {
				// TODO 取消订阅后用户再收不到公众号发送的消息，因此不需要回复消息
			}
			// 自定义菜单点击事件
			else if (eventType.equals(MessageUtil.EVENT_TYPE_CLICK)) {
				// TODO 自定义菜单权没有开放，暂不处理该类消息
			}
		}
		return respContent;
	}

	public static String processRequest(HttpServletRequest request, String respContent) {
		String respMessage = null;
		try {
			// 默认返回的文本消息内容

			// xml请求解析
			//Map<String, String> requestMap = MessageUtil.parseXml(request,"");
			Map<String, String> requestMap = null;
			// 发送方帐号（open_id）
			String fromUserName = requestMap.get("FromUserName");
			// 公众帐号
			String toUserName = requestMap.get("ToUserName");
			// 消息类型
			String msgType = requestMap.get("MsgType");

			
			
			/*TextMessage textMessage = new TextMessage();
			textMessage.setToUserName(fromUserName);
			textMessage.setFromUserName(toUserName);
			textMessage.setCreateTime(new Date().getTime());
			textMessage.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_TEXT);
			//textMessage.setFuncFlag(0);
			textMessage.setContent(respContent);
			respMessage = MessageUtil.textMessageToXml(textMessage);*/
			
			TextMessageReply textMessageReply = null;
			if (msgType.equals(MessageUtil.REQ_MESSAGE_TYPE_EVENT)) {
				String eventType = requestMap.get("Event");
				// 订阅
				if (eventType.equals(MessageUtil.EVENT_TYPE_SUBSCRIBE)) {
					textMessageReply = new TextMessageReply();
					textMessageReply.setToUserName(fromUserName);
					textMessageReply.setFromUserName(toUserName);
					textMessageReply.setCreateTime(new Date().getTime());
					textMessageReply.setMsgType(MessageUtil.RESP_MESSAGE_TYPE_TEXT);
					textMessageReply.setFuncFlag(0);
					textMessageReply.setContent(respContent);
					respMessage = MessageUtil.textMessageToXml(textMessageReply);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return respMessage; //如果不提示，返回""
	}
}
